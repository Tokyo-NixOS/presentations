% 関数型デプロイメント: Nixエコシステムの紹介
% サニエ エリック
% 2016年11月5日 - オープンソースカンファレンス


# 自己紹介

- サニエエリック
- 東京NixOSミートアップオーガナイザー
- NixOSコントリビューター（インプットメソッド等）


# デプロイメントとは

> プログラムをマシンAからマシンBに移し、プログラムはマシンB正常に動く。


# デプロイメントは難しい

- とても難しい
- コンテナーを**使わないとできない**ぐらい難しい


# Why?

- 環境問題
- 管理問題
- グローバルステート


# Solution

- グローバルステートを排除


# グローバルステート

- ファイルシステム
- インストールされたプログラム = 環境


# How

- プログラム管理を考え直す


# Nixエコシステムその1: パッケージマネージャー

- Nix
- デプロイメントとの関係?
- デプロイメントはパッケージマネジメントの特例
- 「インストールされたプログラム = 環境」を非常識に
- 同じプログラムの複数バージョン: YES!
- 一般ユーザのプログラムインストール: YES!
- ロールバック: YES!
- ソース＆バイナリーパッケージ: YES!
- コンテナーは必要: NO!


# Nixエコシステムその2: Linux Distribution

- NixベースのLinux Distribution
- **完全宣言型**


# Nixエコシステムその3: デプロイメントツール

- NixOps


# Nixエコシステムその4: 開発環境管理

- `nix-shell` / nix-containers
- 仮想マシンは必要: NO!


# Nixエコシステムその5: パッケージレポジトリ

- nixpkgs


# Nixエコシステムその6: 継続インテグレーション

- Hydra


# エコシステム比較

- Nix ≈ aptitude + Docker
- `nix-shell` ≈ Vagrant
- NixOS ≈ Docker + CoreOS + Chef / Ansible
- NixOps ≈ Chef / Ansible
- Hydra ≈ Jenkins / Travis


# Nixエコシステム特徴

- 一貫性 (Nix言語)
- 柔軟性


# Questions?


