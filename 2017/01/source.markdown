% NixOS Packaging
% サニエ エリック
% 2017年1月19日 - Tokyo NixOS Meetup


# Agenda

- News
- Nix packaging
    - How it works
    - Hands-on

# News

- [nixpart](https://github.com/NixOS/nixpart): volume partitioning, the nix way
- New feature: [overlays](https://github.com/NixOS/nixpkgs/pull/21243) (alternative to `overridePackages`)
- [nix-darwin](https://github.com/LnL7/nix-darwin): nix modules for mac
- [NixOS Security team](https://nixos.org/nixos/security.html)
- [Typing the nix language](https://www.gofundme.com/typing-nix)
- [Nix works on latests Windows 10 builds](https://github.com/Microsoft/BashOnWindows/issues/743#issuecomment-273199575)
- [Distributing NixOS With IPFS](https://sourcediver.org/blog/2017/01/18/distributing-nixos-with-ipfs-part-1/)
- [Styx 0.5.0 released](https://styx-static.github.io/styx-site/posts/2017-01-19-styx-0.5.0-released.html)


# Packaging

- A nix package is build from a nix expression with a calling `derivation` [builtin function](http://nixos.org/nix/manual/#ssec-builtins)
- Usually declared as a nix expression language function:
    - that return a call to the nixpkgs `stdenv.mkDerivation` wrapper
    - where dependencies are passed as arguments


# Building process

- The nix expression is translated in a derivation (build action information)
- Derivation is build (realised) as a package in the nix store
- Nix Expression -> Derivation -> Nix Store Package


# Nix expression

- Domain specific language to generate derivation files
- Functional language, close to untyped lambda calculus
- To make packages, we need to know 2 constructs:
    - Functions, defined in the `head: body` pattern

        ```
        x: x
        x: x + 1
        ```

    - Sets, defined in the `{ key1 = value1; ... }` pattern:

        ```
        { x = 1; y = "foo"; }
        ```

# Nix expression

- Function head can accept sets:

    ```
    { name }: "Hello " + name
    ```

- A standard nix package has this pattern:

    ```
    { stdenv, dep1, dep2, ... }:
    
    stdenv.mkDerivation {
      name = "foo";
      ...
    }
    ```


# Derivation

- Representation of a generic / universal build action
- contains the following information:
    - Outputs `[(outputName, storePath, hashAlgo, hash)]`
    - Input derivations `[(derivationPath, [outputName])]`
    - Input sources `[storePath]`
    - System `String`
    - Builder `Path`
    - Builder arguments `[argument]`
    - Build environment variables `[(varName, varValue)]`
- generated by a call to `builtins.derivation`
- Stored in the nix store as a `.drv` file
- ≒ Nix expression without moving pieces (only nix-store references)


# Store Package

- Package are created in the nix-store (`/nix/store/`)
- Every package output in its own directory, identified by a hash (`/nix/store/00d805dy01mgmvppsaj78wlg2c2971f4-libevent-2.0.22/`)
- Every nix store package holds **every file** of its output


# nixpkgs

- [nixpkgs](https://github.com/NixOS/nixpkgs) provide packaging tooling for nix expressions:
    - `stdenv`: `st`an`d`ard build `env`ironment
    - collection of packages that can be used as dependencies
    - library and helper functions
    - [guidelines for packaging](http://nixos.org/nixpkgs/manual/)


# stdenv

- provides a standard environment:
    - builder: bash with [custom shell scripts](https://github.com/NixOS/nixpkgs/tree/master/pkgs/stdenv/generic)
    - `mkDerivation` helper function
- Has a generic core with system specific implementations
- source in `pkgs/stdenv/` directory of [nixpkgs](https://github.com/NixOS/nixpkgs/tree/master/pkgs/stdenv)


# stdenv.mkDerivation

- wrapper for the `derivation` builtin function
- uses a custom builder shell script
- divided in phases & accept many parameters
- [Documentation](http://nixos.org/nixpkgs/manual/#chap-stdenv)
- main tool to write packages
- multiple variants:
    - `buildPythonPackage`: for python packages
    - `writeTextFile`: for simple text files
    - ...


# stdenv.mkDerivation main phases

- unpack phase:
    - responsible for unpacking the package source
- build phase:
    - responsible for building the package
- install phase:
    - responsible for installing the package in the nix store


# Packaging examples

- Getting the examples source

    ```
    $ git clone https://github.com/Tokyo-NixOS/presentations
    ```

- examples are under `2017/01/examples/`


# Building the derivation

- Normal building:

    ```
    $ nix-build 2017/01/examples/1-trivial.nix
    ```

- Or decomposing the steps:

    ```
    $ nix-instantiate 2017/01/examples/1-trivial.nix
    $ nix-store -r /PATH/TO/DERIVATION
    ```

- generated nix store package path is symlinked in `./result`


# Main mkDerivation attributes

- `name`: the package name
- `src`: package source
- `buildInputs`: runtime dependencies
- `nativeBuildInputs`: build time dependencies
- `meta`: package meta information


# Packaging time

- Let's package!


# Packaging for nixpkgs

- [Documentation](http://nixos.org/nixpkgs/manual/#chap-quick-start)


# Useful links

- [nixpkgs manual](http://nixos.org/nixpkgs/manual/)
- [nix manual](http://nixos.org/nix/manual/)
- [nix paper](https://nixos.org/~eelco/pubs/phd-thesis.pdf)
